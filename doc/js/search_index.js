var search_data = {"index":{"searchIndex":["car","cartest","cashregister","cashregistertest","cat","cattest","device","minitest","minitest","noexperienceerror","object","testing","text","textanalyzer","texttest","todo","todolist","todolisttest","transaction","transactiontest","tree","<<()","accept_money()","add()","all?()","all_done()","all_not_done()","any?()","assert_instance_of_car()","block_method_2()","block_method_3()","bubble_sort!()","change()","check_return_with_lambda()","compute()","convert_to_base_8()","count()","danish()","divisors()","done!()","done!()","done?()","done?()","drop_while()","each()","each()","each()","each_cons()","each_with_index()","each_with_object()","fields()","find_by_title()","first()","format_date()","gather()","give_receipt()","item_at()","last()","listen()","map()","mark_all_done()","mark_all_undone()","mark_done()","mark_done_at()","mark_undone_at()","max_by()","miaow()","missing()","mysterious_math()","mystery_math()","new()","new()","new()","new()","new()","new()","new()","new()","none?()","one?()","param_passer()","play()","pop()","process()","prompt_for_payment()","record()","reduce()","remove_at()","rot13()","select()","select()","setup()","setup()","setup()","setup()","setup()","shift()","size()","start_transaction()","step()","swap()","teardown()","test_()","test_accept_money()","test_add()","test_add_alias()","test_add_raise_error()","test_array()","test_car_exists()","test_change()","test_done!()","test_done?()","test_done_bang()","test_done_question()","test_downcase()","test_each()","test_each_returns_original_list()","test_error()","test_first()","test_give_receipt()","test_includes_car()","test_is_cat()","test_item_at()","test_last()","test_list()","test_lists()","test_mark_done_at()","test_mark_undone_at()","test_miaow()","test_name()","test_name_is_nil()","test_nil()","test_numeric()","test_numeric_instance()","test_odd()","test_pop()","test_prompt_for_payment()","test_raise_initialize_with_arg()","test_raise_type_error()","test_raises_error()","test_remove_at()","test_select()","test_shift()","test_shovel_operator()","test_size()","test_swap()","test_to_a()","test_to_s()","test_to_s3()","test_to_s_2()","test_to_s_3()","test_wheels()","test_word_count()","times()","to_a()","to_s()","to_s()","undone!()","url?()","word_count()","word_finder()","zip()","02","sample_text","application.css","application.js","index.html"],"longSearchIndex":["car","cartest","cashregister","cashregistertest","cat","cattest","device","minitest","minitest","noexperienceerror","object","testing","text","textanalyzer","texttest","todo","todolist","todolisttest","transaction","transactiontest","tree","todolist#<<()","cashregister#accept_money()","todolist#add()","object#all?()","todolist#all_done()","todolist#all_not_done()","object#any?()","cartest#assert_instance_of_car()","object#block_method_2()","object#block_method_3()","object#bubble_sort!()","cashregister#change()","object#check_return_with_lambda()","object#compute()","object#convert_to_base_8()","object#count()","object#danish()","object#divisors()","todo#done!()","todolist#done!()","todo#done?()","todolist#done?()","object#drop_while()","object#each()","todolist#each()","tree#each()","object#each_cons()","object#each_with_index()","object#each_with_object()","object#fields()","todolist#find_by_title()","todolist#first()","object#format_date()","object#gather()","cashregister#give_receipt()","todolist#item_at()","todolist#last()","device#listen()","object#map()","todolist#mark_all_done()","todolist#mark_all_undone()","todolist#mark_done()","todolist#mark_done_at()","todolist#mark_undone_at()","object#max_by()","cat#miaow()","object#missing()","object#mysterious_math()","object#mystery_math()","car::new()","cashregister::new()","cat::new()","device::new()","text::new()","todo::new()","todolist::new()","transaction::new()","object#none?()","object#one?()","object#param_passer()","device#play()","todolist#pop()","textanalyzer#process()","transaction#prompt_for_payment()","device#record()","object#reduce()","todolist#remove_at()","object#rot13()","object#select()","todolist#select()","cartest#setup()","cashregistertest#setup()","cattest#setup()","texttest#setup()","todolisttest#setup()","todolist#shift()","todolist#size()","cashregister#start_transaction()","object#step()","text#swap()","texttest#teardown()","testing#test_()","cashregistertest#test_accept_money()","todolisttest#test_add()","todolisttest#test_add_alias()","todolisttest#test_add_raise_error()","testing#test_array()","cartest#test_car_exists()","cashregistertest#test_change()","todolisttest#test_done!()","todolisttest#test_done?()","todolisttest#test_done_bang()","todolisttest#test_done_question()","testing#test_downcase()","todolisttest#test_each()","todolisttest#test_each_returns_original_list()","testing#test_error()","todolisttest#test_first()","cashregistertest#test_give_receipt()","cartest#test_includes_car()","cattest#test_is_cat()","todolisttest#test_item_at()","todolisttest#test_last()","testing#test_list()","testing#test_lists()","todolisttest#test_mark_done_at()","todolisttest#test_mark_undone_at()","cattest#test_miaow()","cattest#test_name()","cartest#test_name_is_nil()","testing#test_nil()","testing#test_numeric()","testing#test_numeric_instance()","testing#test_odd()","todolisttest#test_pop()","transactiontest#test_prompt_for_payment()","cartest#test_raise_initialize_with_arg()","todolisttest#test_raise_type_error()","cattest#test_raises_error()","todolisttest#test_remove_at()","todolisttest#test_select()","todolisttest#test_shift()","todolisttest#test_shovel_operator()","todolisttest#test_size()","texttest#test_swap()","todolisttest#test_to_a()","todolisttest#test_to_s()","todolisttest#test_to_s3()","todolisttest#test_to_s_2()","todolisttest#test_to_s_3()","cartest#test_wheels()","texttest#test_word_count()","object#times()","todolist#to_a()","todo#to_s()","todolist#to_s()","todo#undone!()","object#url?()","text#word_count()","object#word_finder()","object#zip()","","","","",""],"info":[["Car","","Car.html","",""],["CarTest","","CarTest.html","",""],["CashRegister","","CashRegister.html","","<p>cash_register.rb\n"],["CashRegisterTest","","CashRegisterTest.html","",""],["Cat","","Cat.html","",""],["CatTest","","CatTest.html","",""],["Device","","Device.html","","<p>Listen for something, and if anything is said, record it for later use. If\nnothing is said, then do not …\n"],["MiniTest","","MiniTest.html","",""],["Minitest","","Minitest.html","",""],["NoExperienceError","","NoExperienceError.html","","<p>Write a minitest assertion that will fail unless employee.hire raises a\nNoExperienceError exception. …\n"],["Object","","Object.html","",""],["Testing","","Testing.html","","<p>Write a minitest assertion that will fail if the value.odd? is not true.\n<p>Write a minitest assertion that …\n"],["Text","","Text.html","",""],["TextAnalyzer","","TextAnalyzer.html","","<p>Officia dolore labore non labore irure nisi ad minim consectetur non irure\nveniam dolor. Laboris cillum …\n"],["TextTest","","TextTest.html","",""],["Todo","","Todo.html","","<p>This class represents a todo item and its associated data: name and\ndescription. There&#39;s also a “done” …\n"],["TodoList","","TodoList.html","","<p>This class represents a collection of Todo objects. You can perform typical\ncollection-oriented actions …\n"],["TodoListTest","","TodoListTest.html","",""],["Transaction","","Transaction.html","","<p>transaction.rb\n"],["TransactionTest","","TransactionTest.html","",""],["Tree","","Tree.html","","<p>Assume we have a Tree class that implements a binary tree.\n"],["<<","TodoList","TodoList.html#method-i-3C-3C","(todo)",""],["accept_money","CashRegister","CashRegister.html#method-i-accept_money","(transaction)",""],["add","TodoList","TodoList.html#method-i-add","(todo)",""],["all?","Object","Object.html#method-i-all-3F","(ary)","<p>Your method may not use any standard ruby method that is named all?, any?,\nnone?, or one?.\n"],["all_done","TodoList","TodoList.html#method-i-all_done","()",""],["all_not_done","TodoList","TodoList.html#method-i-all_not_done","()",""],["any?","Object","Object.html#method-i-any-3F","(ary)","<p>Your method may not use any standard ruby method that is named all?, any?,\nnone?, or one?.\n"],["assert_instance_of_car","CarTest","CarTest.html#method-i-assert_instance_of_car","()",""],["block_method_2","Object","Object.html#method-i-block_method_2","(animal)","<p># My observations: It appears if you are yielding to a block, and that\nblock takes a parameter, you explicitly …\n"],["block_method_3","Object","Object.html#method-i-block_method_3","()","<p># My observations: Same observation as Group 3.\n<p># Group 5\n"],["bubble_sort!","Object","Object.html#method-i-bubble_sort-21","(array)","\n<pre>  break unless swapped\nend\nnil</pre>\n<p>end\n"],["change","CashRegister","CashRegister.html#method-i-change","(transaction)",""],["check_return_with_lambda","Object","Object.html#method-i-check_return_with_lambda","()","<p># My observations: Again, it seems the return, which is inside a block, is\nexecuted before being called. …\n"],["compute","Object","Object.html#method-i-compute","()","<p>Write a method that takes an optional block. If the block is specified, the\nmethod should execute it, …\n"],["convert_to_base_8","Object","Object.html#method-i-convert_to_base_8","(n)","<p>Using this information, together with the course page linked above, fill in\nthe missing part of the following …\n"],["count","Object","Object.html#method-i-count","(ary)","<p>You may not use Array#count or Enumerable#count in your solution.\n"],["danish","Object","Object.html#method-i-danish","(str)","<p>Write a method that changes the first occurrence of the word apple,\nblueberry, or cherry in a string …\n"],["divisors","Object","Object.html#method-i-divisors","(int)","<p>def divisors(int)\n\n<pre>half = int / 2\nlist = [1]\nhalf.downto(2) do |i|\n  if int % i == 0\n    list &lt;&lt; i\n    ...</pre>\n"],["done!","Todo","Todo.html#method-i-done-21","()",""],["done!","TodoList","TodoList.html#method-i-done-21","()",""],["done?","Todo","Todo.html#method-i-done-3F","()",""],["done?","TodoList","TodoList.html#method-i-done-3F","()",""],["drop_while","Object","Object.html#method-i-drop_while","(ary)","<p>Your method may use #each, #each_with_object, #each_with_index, #inject,\nloop, for, while, or until to …\n"],["each","Object","Object.html#method-i-each","(ary)",""],["each","TodoList","TodoList.html#method-i-each","()",""],["each","Tree","Tree.html#method-i-each","()",""],["each_cons","Object","Object.html#method-i-each_cons","(ary)","<p>Your method may use #each, #each_with_object, #each_with_index, #inject,\nloop, for, while, or until to …\n"],["each_with_index","Object","Object.html#method-i-each_with_index","(ary)","<p>Your method may use #each, #each_with_object, #inject, loop, for, while, or\nuntil to iterate through …\n"],["each_with_object","Object","Object.html#method-i-each_with_object","(ary, obj)","<p>Your method may use #each, #each_with_index, #inject, loop, for, while, or\nuntil to iterate through the …\n"],["fields","Object","Object.html#method-i-fields","(str)","<p>Write a method that returns all of the fields in a haphazardly formatted\nstring. A variety of spaces, …\n"],["find_by_title","TodoList","TodoList.html#method-i-find_by_title","(title)","<p>returns first Todo by title, or nil if no match\n"],["first","TodoList","TodoList.html#method-i-first","()",""],["format_date","Object","Object.html#method-i-format_date","(date)","<p>Challenge: write a method that changes dates in the format 2016-06-17 to\nthe format 17.06.2016. You must …\n"],["gather","Object","Object.html#method-i-gather","(items)",""],["give_receipt","CashRegister","CashRegister.html#method-i-give_receipt","(transaction)",""],["item_at","TodoList","TodoList.html#method-i-item_at","(idx)",""],["last","TodoList","TodoList.html#method-i-last","()",""],["listen","Device","Device.html#method-i-listen","()",""],["map","Object","Object.html#method-i-map","(ary)","<p>Your method may use #each, #each_with_object, #each_with_index, #inject,\nloop, for, while, or until to …\n"],["mark_all_done","TodoList","TodoList.html#method-i-mark_all_done","()",""],["mark_all_undone","TodoList","TodoList.html#method-i-mark_all_undone","()",""],["mark_done","TodoList","TodoList.html#method-i-mark_done","(title)",""],["mark_done_at","TodoList","TodoList.html#method-i-mark_done_at","(idx)",""],["mark_undone_at","TodoList","TodoList.html#method-i-mark_undone_at","(idx)",""],["max_by","Object","Object.html#method-i-max_by","(ary)","<p>Your method may use #each, #each_with_object, #each_with_index, #inject,\nloop, for, while, or until to …\n"],["miaow","Cat","Cat.html#method-i-miaow","()",""],["missing","Object","Object.html#method-i-missing","(ary)","<p>input: sorted ary of ints output: ary that has all missing ints between min\nand max\n"],["mysterious_math","Object","Object.html#method-i-mysterious_math","(str)","<p>Write a method that changes every arithmetic operator (+, -, *, /) to a\n&#39;?&#39; and returns the resulting …\n"],["mystery_math","Object","Object.html#method-i-mystery_math","(str)","<p>Write a method that changes the first arithmetic operator (+, -, *, /) in a\nstring to a &#39;?&#39; and …\n"],["new","Car","Car.html#method-c-new","()",""],["new","CashRegister","CashRegister.html#method-c-new","(total_money)",""],["new","Cat","Cat.html#method-c-new","(name)",""],["new","Device","Device.html#method-c-new","()",""],["new","Text","Text.html#method-c-new","(text)",""],["new","Todo","Todo.html#method-c-new","(title, description='')",""],["new","TodoList","TodoList.html#method-c-new","(title)",""],["new","Transaction","Transaction.html#method-c-new","(item_cost)",""],["none?","Object","Object.html#method-i-none-3F","(ary, &block)",""],["one?","Object","Object.html#method-i-one-3F","(ary)","<p>logic: analyze each element for truthiness. As soon as we get one truthy\nreturn, we need to be prepared …\n"],["param_passer","Object","Object.html#method-i-param_passer","(ary)",""],["play","Device","Device.html#method-i-play","()",""],["pop","TodoList","TodoList.html#method-i-pop","()",""],["process","TextAnalyzer","TextAnalyzer.html#method-i-process","()",""],["prompt_for_payment","Transaction","Transaction.html#method-i-prompt_for_payment","(input: $stdin, output: $stdout)",""],["record","Device","Device.html#method-i-record","(recording)",""],["reduce","Object","Object.html#method-i-reduce","(ary, init=0)","<p>Try to write a reduce method on your own that exhibits this behavior. Your\nreduce should take at least …\n"],["remove_at","TodoList","TodoList.html#method-i-remove_at","(idx)",""],["rot13","Object","Object.html#method-i-rot13","(full_name)",""],["select","Object","Object.html#method-i-select","(ary)",""],["select","TodoList","TodoList.html#method-i-select","()",""],["setup","CarTest","CarTest.html#method-i-setup","()",""],["setup","CashRegisterTest","CashRegisterTest.html#method-i-setup","()",""],["setup","CatTest","CatTest.html#method-i-setup","()",""],["setup","TextTest","TextTest.html#method-i-setup","()",""],["setup","TodoListTest","TodoListTest.html#method-i-setup","()",""],["shift","TodoList","TodoList.html#method-i-shift","()",""],["size","TodoList","TodoList.html#method-i-size","()",""],["start_transaction","CashRegister","CashRegister.html#method-i-start_transaction","(transaction)",""],["step","Object","Object.html#method-i-step","(first, last, diff)","<p>input: first item of range, last item, and step size between the two\noutput: TBD logic:\n"],["swap","Text","Text.html#method-i-swap","(letter_one, letter_two)",""],["teardown","TextTest","TextTest.html#method-i-teardown","()",""],["test_","Testing","Testing.html#method-i-test_","()",""],["test_accept_money","CashRegisterTest","CashRegisterTest.html#method-i-test_accept_money","()",""],["test_add","TodoListTest","TodoListTest.html#method-i-test_add","()",""],["test_add_alias","TodoListTest","TodoListTest.html#method-i-test_add_alias","()",""],["test_add_raise_error","TodoListTest","TodoListTest.html#method-i-test_add_raise_error","()",""],["test_array","Testing","Testing.html#method-i-test_array","()",""],["test_car_exists","CarTest","CarTest.html#method-i-test_car_exists","()",""],["test_change","CashRegisterTest","CashRegisterTest.html#method-i-test_change","()",""],["test_done!","TodoListTest","TodoListTest.html#method-i-test_done-21","()",""],["test_done?","TodoListTest","TodoListTest.html#method-i-test_done-3F","()",""],["test_done_bang","TodoListTest","TodoListTest.html#method-i-test_done_bang","()",""],["test_done_question","TodoListTest","TodoListTest.html#method-i-test_done_question","()",""],["test_downcase","Testing","Testing.html#method-i-test_downcase","()",""],["test_each","TodoListTest","TodoListTest.html#method-i-test_each","()",""],["test_each_returns_original_list","TodoListTest","TodoListTest.html#method-i-test_each_returns_original_list","()",""],["test_error","Testing","Testing.html#method-i-test_error","()",""],["test_first","TodoListTest","TodoListTest.html#method-i-test_first","()",""],["test_give_receipt","CashRegisterTest","CashRegisterTest.html#method-i-test_give_receipt","()",""],["test_includes_car","CarTest","CarTest.html#method-i-test_includes_car","()",""],["test_is_cat","CatTest","CatTest.html#method-i-test_is_cat","()",""],["test_item_at","TodoListTest","TodoListTest.html#method-i-test_item_at","()",""],["test_last","TodoListTest","TodoListTest.html#method-i-test_last","()",""],["test_list","Testing","Testing.html#method-i-test_list","()",""],["test_lists","Testing","Testing.html#method-i-test_lists","()",""],["test_mark_done_at","TodoListTest","TodoListTest.html#method-i-test_mark_done_at","()",""],["test_mark_undone_at","TodoListTest","TodoListTest.html#method-i-test_mark_undone_at","()",""],["test_miaow","CatTest","CatTest.html#method-i-test_miaow","()",""],["test_name","CatTest","CatTest.html#method-i-test_name","()",""],["test_name_is_nil","CarTest","CarTest.html#method-i-test_name_is_nil","()",""],["test_nil","Testing","Testing.html#method-i-test_nil","()",""],["test_numeric","Testing","Testing.html#method-i-test_numeric","()",""],["test_numeric_instance","Testing","Testing.html#method-i-test_numeric_instance","()",""],["test_odd","Testing","Testing.html#method-i-test_odd","()",""],["test_pop","TodoListTest","TodoListTest.html#method-i-test_pop","()",""],["test_prompt_for_payment","TransactionTest","TransactionTest.html#method-i-test_prompt_for_payment","()",""],["test_raise_initialize_with_arg","CarTest","CarTest.html#method-i-test_raise_initialize_with_arg","()",""],["test_raise_type_error","TodoListTest","TodoListTest.html#method-i-test_raise_type_error","()",""],["test_raises_error","CatTest","CatTest.html#method-i-test_raises_error","()",""],["test_remove_at","TodoListTest","TodoListTest.html#method-i-test_remove_at","()",""],["test_select","TodoListTest","TodoListTest.html#method-i-test_select","()",""],["test_shift","TodoListTest","TodoListTest.html#method-i-test_shift","()",""],["test_shovel_operator","TodoListTest","TodoListTest.html#method-i-test_shovel_operator","()",""],["test_size","TodoListTest","TodoListTest.html#method-i-test_size","()",""],["test_swap","TextTest","TextTest.html#method-i-test_swap","()",""],["test_to_a","TodoListTest","TodoListTest.html#method-i-test_to_a","()",""],["test_to_s","TodoListTest","TodoListTest.html#method-i-test_to_s","()",""],["test_to_s3","TodoListTest","TodoListTest.html#method-i-test_to_s3","()",""],["test_to_s_2","TodoListTest","TodoListTest.html#method-i-test_to_s_2","()",""],["test_to_s_3","TodoListTest","TodoListTest.html#method-i-test_to_s_3","()",""],["test_wheels","CarTest","CarTest.html#method-i-test_wheels","()",""],["test_word_count","TextTest","TextTest.html#method-i-test_word_count","()",""],["times","Object","Object.html#method-i-times","(number)",""],["to_a","TodoList","TodoList.html#method-i-to_a","()",""],["to_s","Todo","Todo.html#method-i-to_s","()",""],["to_s","TodoList","TodoList.html#method-i-to_s","()",""],["undone!","Todo","Todo.html#method-i-undone-21","()",""],["url?","Object","Object.html#method-i-url-3F","(str)","<p>Write a method that returns true if its argument looks like a URL, false if\nit does not.\n"],["word_count","Text","Text.html#method-i-word_count","()",""],["word_finder","Object","Object.html#method-i-word_finder","(letters, size=letters.size, places=[], inserts=[])",""],["zip","Object","Object.html#method-i-zip","(ary1, ary2)","<p>Write your own version of zip that does the same type of operation. It\nshould take two Arrays as arguments, …\n"],["02","","exercises/medium_1/02_txt.html","","<p>Eiusmod non aute commodo excepteur amet consequat ex elit. Ut excepteur\nipsum enim nulla aliqua fugiat …\n"],["sample_text","","exercises/medium_testing/sample_text_txt.html","","<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras sed vulputate\nipsum. Suspendisse commodo …\n"],["application.css","","lesson_2/coverage/assets/0_10_2/application_css.html","","\n<pre>  -----------------------------------------------------------------------\n\nBlueprint CSS Framework 0.9 ...</pre>\n"],["application.js","","lesson_2/coverage/assets/0_10_2/application_js.html","","\n<pre>!\n jQuery JavaScript Library v1.6.2\n http://jquery.com/\n\n Copyright 2011, John Resig\n Dual licensed under ...</pre>\n"],["index.html","","lesson_2/coverage/index_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html xmlns=&#39;www.w3.org/1999/xhtml&#39;&gt;\n\n<pre>&lt;head&gt;\n  &lt;title&gt;Code coverage ...</pre>\n"]]}}